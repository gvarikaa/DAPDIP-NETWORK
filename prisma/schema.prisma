generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  posts Post[]

  likes Like[]

  saves SavedPosts[]

  followers  Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")

  messages                Message[]                 @relation("SentMessages")
  conversationParticipant ConversationParticipant[]
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]

  saves SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}

// პირველ რიგში დავამატოთ ახალი მოდელები სქემაში - prisma/schema.prisma ფაილში

// 1. ჩატის ოთახის მოდელი
model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ურთიერთობები
  messages     Message[]
  participants ConversationParticipant[]

  @@map("conversations")
}

// 2. საუბარში მონაწილის მოდელი
model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  readUntil      DateTime @default(now())

  // ურთიერთობები
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

// 3. შეტყობინების მოდელი
model Message {
  id             String   @id @default(cuid())
  content        String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  conversationId String
  senderId       String
  read           Boolean  @default(false)

  // რელაციები
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(name: "SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}
